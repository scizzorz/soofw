title: 'Terminals Can Have Colors!'
datetime: 2013-02-09 23:20:00
tags:
  - shells
body: |
  I love using terminal emulators. I think they're pretty neat, and I think they're pretty powerful too, but I also think they can be pretty hard to use without some moderate customization. Conveniently enough, I love personalizing my gadgets, tools, and programs. I've spent a lot of time in the last two years collecting tiny snippets and adding them to my `.bashrc`, and all of this accumulation has resulted in a rather personal terminal / prompt set up. I'll try to highlight the best features in this post so anyone else can use them.

  Before starting, I would like to point out that this is *my* prompt and is designed to suit *my* needs. You might have different needs, wants, and goals, so this might not be a perfect set up for you, but I'm hoping you'll at least learn something new. I would also like to point out that (almost) all of my Linux dotfiles are available on my [GitHub](http://github.com/scizzorz/dots/) page.

  ## Why bother?

  I'll just quote Steve Losh's [wonderful answer](http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/#why-should-you-care) to the same question:

  > Many people use the command line every day and never bother to customize their prompts. It’s just a bit of text that’s printed before every command — why should you waste time learning how to customize it?
  >
  > I feel that the *most* important aspect of my command line work is the prompt. Your prompt is something you’ll see *literally* thousands of times a day. Why not take 30 minutes and customize it into something that’s much more useful?
  >
  > I firmly believe I’m right in thinking this way. 30 minutes (or even 3 hours) of customization to make your work easier for the **rest of your life** (or at least however long you stay with your current shell) *is* worth it.

  That's why. Even more importantly, most default prompts are completely unusable. They usually lack any color highlighting which makes them blend into large command output. Some even lack the current working directory, and most are in such a compact form that it can be hard to distinguish one part from another without colors. For example:

  <code>john@desktop:$HOME/projects/arduino/&gt;</code>  
  vs  
  <code><span class="shellpurple">john desktop</span> <span class="shellgreen">~/projects/arduino</span> <span class="shellred">master?+4 $</span></code>

  Without even reading my own prompt, I can determine I'm logged into my desktop and working in a git repository. After reading, I can tell you that the repository has untracked files but no modifications, I'm 4 commits ahead of the remote repository, and I'm currently tracking my project time with [`clk`](http://github.com/scizzorz/clk). I can't say anything good about the alternative.

  ## Colors, Font, and Terminal

  For a terminal emulator, I use [GNOME Terminal](http://en.wikipedia.org/wiki/GNOME_Terminal) or the [Secure Shell](https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en) Chrome Extension when on my Chromebook or a non-Linux machine. I'm using [Proggy Clean (Slashed Zeros)](http://www.proggyfonts.com/index.php?menu=download) 12pt for my font, although I find the size varies from machine to machine and terminal to terminal. Make sure you always find the appropriate size for Proggy or it will look like garbage; pixel fonts are atrocious unless they're sized correctly. My background is black with approximately 80% transparency. I use a customized 16-color palette that really likes to mess with color-highlighted output, so copying it exactly may not be the best idea unless you can put up with the occasional color mistakes. The first 8 colors are all varying shades of gray, while the next 8 are some rainbowy accent colors:

  * Default: <span class="shelldefault">Light gray #0</span> #D9D9D9
  * Color 0: <span class="shell0">Dark gray #1</span> #2E3338
  * Color 1: <span class="shell1">Dark gray #2</span> #454C54
  * Color 2: <span class="shell2">Dark gray #3</span> #5C6670
  * Color 3: <span class="shell3">Gray #1</span> #737F8C
  * Color 4: <span class="shell4">Gray #2</span> #8F99A3
  * Color 5: <span class="shell5">Light gray #1</span> #ABB3BA
  * Color 6: <span class="shell6">Light gray #2</span> #C7CCD1
  * Color 7: <span class="shell7">Light gray #3</span> #E3E6E8
  * Color 8: <span class="shell8">Red</span> #FF4D6A
  * Color 9: <span class="shell9">Orange</span> #FFA64D
  * Color 10: <span class="shell10">Yellow</span> #E1FF4D
  * Color 11: <span class="shell11">Green</span> #6AFF4D
  * Color 12: <span class="shell12">Seafoam</span> #4DFFA6
  * Color 13: <span class="shell13">Cyan</span> #4DE1FF
  * Color 14: <span class="shell14">Blue</span> #4DA6FF
  * Color 15: <span class="shell15">Purple</span> #A64DFF

  ![Color Scheme Screenshot](http://soofw.com/up/colors.png)

  ## Shell and Prompt

  I'm using [bash](http://en.wikipedia.org/wiki/Bash_(Unix_shell)) as my shell. I've heard great things about [zsh](http://www.zsh.org/), but I find that bash is more universally available. It's also the default shell on most machines, so this post should hopefully be applicable to most people.

  My prompt leads with the history number of the current command. This seemed like an excellent feature at first, but I'm starting to use it less frequently than I used to. Essentially, having the line number be so visible makes it much easier to use bash's `!###` history lookup, where `###` is the history line. In practice, I find myself using `ctrl-r` and `!partial` more frequently. In bash, `ctrl-r` allows you to reverse search through the history by typing part of a command, while `!partial` will automatically reverse search the history and be replaced by the first command that starts with `partial`. For example, frequently editing a file with `vim file.c` and compiling with `make` can be repeated with `!v` and `!m`. That can get a little tricky if you suddenly use a `man` page however, as `!m` will find the most recent command that started with `m`.

  Immediately following the history number is my username and the hostname, color-coded according to the host. For example, my desktop prompt is purple, while my web server is yellow and my [Raspberry Pi](http://www.raspberrypi.org/) is raspberry red. If I'm logged in as root, my username will also turn red, and the command separator will turn into a `#`. After the hostname is my current working directory highlighted in green. The neatest part, in my opinion, is the current git repository status between the working directory and command separator. While I'm currently in a git repository, the working branch shows up in red. If the current repository has no changes but contains untracked files, a question mark will be appended after the branch. If the repository has staged or unstaged changes, an asterisk will be appended. If the repository is ahead of the remote, a `+X` will be appended to notify me of how long it's been since I last pushed my commits. Lastly, the command separator (normally a `$`, but `#` when root) changes colors based on my [`clk`](https://github.com/scizzorz/clk) status: green means I have no clock data for this directory, red means I'm clocked in and tracking my time, and yellow means I'm clocked out and not tracking my time.

  ![Prompt Screenshot](http://soofw.com/up/prompt-small.png)

  ## Conclusion

  I'll try to elaborate more on *how* to add these features in the future, but I just wanted to give a nice sample of my prompt. For the adventurous, you can check out my `.bashrc` at [GitHub](http://github.com/scizzorz/dots).

